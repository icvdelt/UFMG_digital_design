proc create_single_codeword_transmission {number_of_symbols} {
    assume -bound 1 i_encoder_start_codeword
    assume {i_encoder_start_codeword |=> not (i_encoder_start_codeword)}
    assume {not (i_encoder_start_codeword) |=> not (i_encoder_start_codeword)}
    
    set num_cycles_not_end_codeword [expr {$number_of_symbols - 1}]
    set CMD "assume \{i_encoder_start_codeword |-> not i_encoder_end_codeword \[*$num_cycles_not_end_codeword\] ##1 i_encoder_end_codeword\}"
    eval $CMD
    assume {i_encoder_end_codeword |=> not (i_encoder_valid)}
    assume {not (i_encoder_valid) |=> not (i_encoder_valid)}
    #set num_cycles_not_encoder [expr {$number_of_symbols - 1}]
    #if {$num_cycles_not_encoder != 0} {
    #    assume {not i_encoder_end_codeword} -bound $num_cycles_not_encoder
    #}
    #set CMD "assume \{##$num_cycles_not_encoder not i_encoder_end_codeword |=> not i_encoder_end_codeword\}"
    #eval $CMD
    #assume {i_encoder_end_codeword |=> not i_encoder_end_codeword}
    #set CMD "assume \{##$num_cycles_not_encoder i_encoder_end_codeword\} -bound $number_of_symbols"
    #eval $CMD

    #assume {i_encoder_valid} -bound $number_of_symbols
    #set CMD "assume \{##$number_of_symbols not i_encoder_valid\}"
    #eval $CMD
    #assume {not i_encoder_valid |=> not i_encoder_valid}
}

proc run_analyze {}  {      analyze -vhdl08 -L GENERIC_TYPES ../../generic_components/generic_types.vhd
			    analyze -vhdl08 -L GENERIC_COMPONENTS ../../generic_components/generic_components.vhd
			    analyze -vhdl08 -L GENERIC_FUNCTIONS ../../generic_components/generic_functions.vhd
			    analyze -vhdl08 -L RS_TYPES ../../rs_common/rs_types.vhd
			    analyze -vhdl08 -L RS_CONSTANTS ../../rs_common/rs_constants.vhd
			    analyze -vhdl08 -L RS_FUNCTIONS ../../rs_common/rs_functions.vhd
			    analyze -vhdl08 -L RS_COMPONENTS ../../rs_common/rs_components.vhd
			    analyze -vhdl08 -L RS_CONSTANTS ../../rs_common/rs_constants.vhd
			    analyze -vhdl08 ../../rs_decoder/rtl/rs_decoder.vhd\
				../../generic_components/async_dff/async_dff.vhd\
				../../generic_components/d_sync_flop/d_sync_flop.vhd\
				../../generic_components/no_rst_dff/no_rst_dff.vhd\
				../../generic_components/config_dff_array/config_dff_array.vhd\
				../../generic_components/sync_dff_array/sync_dff_array.vhd\
				../../generic_components/fifo_array/reg_fifo_array.vhd\
				../../generic_components/fifo/reg_fifo.vhd\
				../../generic_components/up_counter/up_counter.vhd\
				../../rs_common/rs_adder/rs_adder.vhd\
				../../rs_common/rs_multiplier_lut/rs_multiplier_lut.vhd\
				../../rs_common/rs_multiplier/rs_multiplier.vhd\
				../../rs_common/rs_inverse/rs_inverse.vhd\
				../../rs_common/rs_full_multiplier/rs_full_multiplier.vhd\
				../../rs_common/rs_reduce_adder/rs_reduce_adder.vhd\
				../../rs_decoder/rtl/rs_syndrome/rs_syndrome_subunit/rs_syndrome_subunit.vhd\
				../../rs_decoder/rtl/rs_syndrome/rs_syndrome.vhd\
				../../rs_decoder/rtl/rs_berlekamp_massey/rs_berlekamp_massey.vhd\
				../../rs_decoder/rtl/rs_chien_forney/rs_chien/rs_chien.vhd\
				../../rs_decoder/rtl/rs_chien_forney/rs_forney/rs_forney.vhd\
				../../rs_decoder/rtl/rs_chien_forney/rs_chien_forney.vhd 
    analyze -vhdl08 ../../rs_encoder/rtl/rs_encoder.vhd\
                    ../../generic_components/async_dff/async_dff.vhd\
                    ../../rs_common/rs_adder/rs_adder.vhd\
                    ../../rs_common/rs_multiplier_lut/rs_multiplier_lut.vhd\
                    ../../rs_common/rs_multiplier/rs_multiplier.vhd\
                    ../../rs_encoder/rtl/rs_remainder_unit/rs_remainder_unit.vhd\
		    ../../rs_decoder/rtl/rs_syndrome/rs_syndrome.vhd\
		    ../../rs_decoder/rtl/rs_syndrome/rs_syndrome_subunit/rs_syndrome_subunit.vhd\
		    ../../rs_encoder/rtl/rs_encoder_wrapper.vhd
    analyze -vhdl08 rtl/rs_error_generator.vhd
    analyze -vhdl08 rtl/rs_codec_wrapper.vhd
}

proc run_design_compilation {N K RS_GF} {
    clear -all
    run_analyze
    elaborate -vhdl -top rs_codec_wrapper -parameter N $N -parameter K $K -parameter RS_GF $RS_GF
    #connect -bind -auto fv_decoder mod2 -auto -elaborate 
}

